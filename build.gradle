import java.nio.file.Files

buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.135'
	}
}

plugins {
	id 'babric-loom' version '1.4.+'
	id 'java'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

group = project.mod_group
archivesBaseName = project.mod_name
version = project.mod_version

loom {
	gluedMinecraftJar()
	//serverOnlyMinecraftJar()
	noIntermediateMappings()
	customMinecraftManifest.set("https://github.com/Turnip-Labs/bta-manifest-repo/releases/download/v${project.bta_version}/${project.bta_version}.json")
}

repositories {
	mavenCentral()
	maven { url = "https://jitpack.io" }
	maven {
		name = 'Babric'
		url = 'https://maven.glass-launcher.net/babric'
	}
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'Signalum Maven'
		url = 'https://maven.thesignalumproject.net/'
	}
	ivy {
		url = "https://github.com/Better-than-Adventure"
		patternLayout {
			artifact "[organisation]/releases/download/v[revision]/[module].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/Turnip-Labs"
		patternLayout {
			artifact "[organisation]/releases/download/v[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/Turnip-Labs"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/Turnip-Labs"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]/[module]-bta-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://piston-data.mojang.com"
		patternLayout {
			artifact "v1/[organisation]/[revision]/[module].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/MartinSVK12"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/MartinSVK12"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]bta/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/ToufouMaster"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/SamuelDeboni"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/UselessBullets"
		patternLayout {
			artifact "[organisation]/releases/download/v[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/MartinSVK12"
		patternLayout {
			artifact "[organisation]/releases/download/[revision]-BTA/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
	ivy {
		url = "https://github.com/UselessBullets"
		patternLayout {
			artifact "[organisation]/releases/download/r[revision]/[module]-[revision].jar"
			m2compatible = true
		}
		metadataSources { artifact() }
	}
}

dependencies {
	minecraft "bta-download-repo:bta:${project.bta_version}"
	mappings loom.layered() {}

	modRuntimeOnly "objects:client:43db9b498cb67058d2e12d394e6507722e71bb45" // https://piston-data.mojang.com/v1/objects/43db9b498cb67058d2e12d394e6507722e71bb45/client.jar
	modImplementation "fabric-loader:fabric-loader:${project.loader_version}"
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.1")))

	// Helper library
	// If you do not need Halplibe you can comment this line out or delete this line
	implementation project(path: ":halplibe",configuration: "namedElements")


	modImplementation "ModMenu:ModMenu:${project.modmenu_version}"

	implementation project(path: ":catalyst",configuration: "namedElements")
	implementation project(path: ":catalyst:energy",configuration: "namedElements")
	implementation project(path: ":catalyst:fluids",configuration: "namedElements")
	implementation project(path: ":catalyst:multiblocks",configuration: "namedElements")
	implementation project(path: ":catalyst:effects",configuration: "namedElements")
	implementation project(path: ":catalyst:multipart",configuration: "namedElements")

	implementation project(path: ":retrostorage",configuration: "namedElements")

	implementation project(path: ":btwaila",configuration: "namedElements")
	implementation project(path: ":vintage-questing",configuration: "namedElements")

	//implementation project(path: ":dragonfly",configuration: "namedElements")
	//implementation project(path: ":btg",configuration: "namedElements")


	modImplementation "DragonFly:dragonfly:${project.dragonfly_version}"
	modImplementation "TerrainAPI:terrainapi:${project.terrain_api_version}"

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.16.0"

	implementation 'com.google.guava:guava:33.0.0-jre'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

	var log4jVersion = "2.20.0"
	implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}")
	implementation("org.apache.commons:commons-lang3:3.12.0")
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.release.set 8
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

processResources {
	inputs.property "version", version

	filesMatching("fabric.mod.json") {
		expand "version": version
	}
}

remapJar {
	archiveVersion.set(archiveVersion.get()+"-${bta_version}")
}

static boolean checkVersion(String group, String name, String version) {
	try {
		def xml = new URL("https://maven.thesignalumproject.net/releases/${group}/${name}/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			System.err.println("Version ${version} of ${group}.${name} already exists!")
			return false
		}
		return true
	} catch (FileNotFoundException ignored){
		return true
	}
}

allprojects {
	apply plugin:'maven-publish'
	apply plugin:'java'

	def publishedProjectsList = ["signalindustries","catalyst","retrostorage","vintage-questing"]
	def modrinthPublishedProjectsList = ["signalindustries","catalyst","retrostorage"]

	for (final def p in publishedProjectsList) {
		if(project.name != "catalyst" && project.mod_name.contains(p)) {
			publishing {
				if(checkVersion(project.mod_group,project.mod_name,project.mod_version)) {
					repositories {
						maven {
							name = "signalumMaven"
							url = "https://maven.thesignalumproject.net/releases"
							credentials(PasswordCredentials)
							authentication {
								basic(BasicAuthentication)
							}
						}
					}

					publications {
						maven(MavenPublication) {
							groupId = project.mod_group
							artifactId = project.mod_name
							version = project.mod_version
							from components.java
						}
					}
				}
			}
		} else if(project.name == "catalyst" && project.core_mod_name.contains(p)){
			publishing {
				if(checkVersion(project.core_mod_group,project.core_mod_name,project.core_mod_version)) {
					repositories {
						maven {
							name = "signalumMaven"
							url = "https://maven.thesignalumproject.net/releases"
							credentials(PasswordCredentials)
							authentication {
								basic(BasicAuthentication)
							}
						}
					}

					publications {
						maven(MavenPublication) {
							groupId = project.core_mod_group
							artifactId = project.core_mod_name
							version = project.core_mod_version
							from components.java
						}
					}
				}
			}
		}
	}
}

modrinth {
	token = modrinthToken
	projectId = "signal-industries" // This can be the project ID or the slug. Either will work!
	versionNumber = project.mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
	versionType = "alpha" // This is the default -- can also be `beta` or `alpha`
	uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = ["b1.7.3"] // Must be an array, even with only one version
	loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	changelog = Files.readString(java.nio.file.Path.of("${rootProject.projectDir}/CHANGELOG.md"))
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		//required.project "fabric-api" // Creates a new required dependency on Fabric API
		//optional.version "sodium", "mc1.19.3-0.4.8" // Creates a new optional dependency on this specific version of Sodium
		required.project "halplibe"
		required.project "catalyst"
		required.project "dragonfly-model-library"
		required.project "terrainapi"
	}
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

tasks.register('github') {
	doLast {
		def github = GitHub.connectUsingOAuth(githubToken as String)
		def repository = github.getRepository("MartinSVK12/signalindustries")

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("$version")
		releaseBuilder.body(Files.readString(java.nio.file.Path.of("${rootProject.projectDir}/CHANGELOG.md")))
		releaseBuilder.commitish("7.2")
		releaseBuilder.prerelease(true)

		def release = releaseBuilder.create()
		release.uploadAsset(project.file(remapJar.getArchiveFile().get().getAsFile()),"application/java-archive")
		release.uploadAsset(project.file(remapSourcesJar.getArchiveFile().get().getAsFile()),"application/java-archive")
	}
}

tasks.register('deploy'){
	description "Publish mod to maven, modrinth and github."
	group "publishing"
	dependsOn 'publish'
	dependsOn 'modrinth'
	dependsOn 'github'
}